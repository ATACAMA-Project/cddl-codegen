static NULL: u8 = 0xf6;
static BREAK: u8 = 0xff;
static ARR_INDEF: u8 = 0x9f;
static MAP_INDEF: u8 = 0xbf;

// to work around JsValue error types (TODO: we should fix this in cddl-codegen)
fn from_bytes<T: Deserialize + Sized>(data: Vec<u8>) -> Result<T, DeserializeError> {
    let mut raw = Deserializer::from(std::io::Cursor::new(data));
    T::deserialize(&mut raw)
}

fn arr_def(len: u8) -> Vec<u8> {
    assert!(len <= 0x17);
    vec![0x80u8 + len]
}

fn map_def(len: u8) -> Vec<u8> {
    assert!(len <= 0x17);
    vec![0xa0 + len]
}

fn cbor_string(s: &str) -> Vec<u8> {
    // our keys are short so we don't handle bigger ones
    assert!(s.len() <= 0x17);
    let mut bytes = Vec::with_capacity(s.len() + 1);
    bytes.push(0x60u8 + s.len() as u8);
    bytes.extend_from_slice(s.as_bytes());
    bytes
}

fn cbor_tag(t: u8) -> Vec<u8> {
    assert!(t <= 0xd4 - 0xc0);
    vec![0xc0u8 + t]
}

fn print_cbor_types(obj_name: &str, vec: &Vec<u8>) {
    use cbor_event::Type;
    let mut raw = Deserializer::from(std::io::Cursor::new(vec));
    let mut lens = Vec::new();
    let consume_elem = |lens: &mut Vec<cbor_event::Len>| {
        if let Some(len) = lens.last_mut() {
            if let cbor_event::Len::Len(n) = len {
                *n -= 1;
            }
        };
    };
    let reduce_depth = |lens: &mut Vec<cbor_event::Len>| {
        while let Some(cbor_event::Len::Len(0)) = lens.last() {
            lens.pop();
            println!("{}}}", "\t".repeat(lens.len()));
        }
    };
    println!("{} = {{", obj_name);
    loop {
        print!("{}", "\t".repeat(lens.len()));
        match raw.cbor_type() {
            Err(_) => break,
            Ok(Type::UnsignedInteger) => {
                println!("UINT({})", raw.unsigned_integer().unwrap());
                consume_elem(&mut lens);
                reduce_depth(&mut lens);
            },
            Ok(Type::NegativeInteger) => {
                println!("NINT({})", raw.negative_integer().unwrap());
                consume_elem(&mut lens);
                reduce_depth(&mut lens);
            },
            Ok(Type::Bytes) => {
                println!("BYTES({:?})", raw.bytes().unwrap());
                consume_elem(&mut lens);
                reduce_depth(&mut lens);
            },
            Ok(Type::Text) => {
                println!("TEXT({})", raw.text().unwrap());
                consume_elem(&mut lens);
                reduce_depth(&mut lens);
            },
            Ok(Type::Array) => {
                let len = raw.array().unwrap();
                println!("ARRAY({:?}) {{", len);
                consume_elem(&mut lens);
                lens.push(len);
                if let cbor_event::Len::Len(0) = len {
                    reduce_depth(&mut lens);
                }
            },
            Ok(Type::Map) => {
                let len = raw.map().unwrap();
                println!("MAP({:?}) {{", len);
                consume_elem(&mut lens);
                lens.push(match len {
                    cbor_event::Len::Len(n) => cbor_event::Len::Len(2 * n),
                    cbor_event::Len::Indefinite => cbor_event::Len::Indefinite,
                });
                if let cbor_event::Len::Len(0) = len {
                    reduce_depth(&mut lens);
                }
            },
            Ok(Type::Tag) => println!("TAG({})", raw.tag().unwrap()),
            Ok(Type::Special) => {
                let special = raw.special().unwrap();
                println!("SPECIAL({:?})", special);
                if special == cbor_event::Special::Break {
                    if let Some(cbor_event::Len::Indefinite) = lens.last() {
                        lens.pop();
                        reduce_depth(&mut lens);
                    } else {
                        panic!("unexpected break");
                    }
                } else {
                    consume_elem(&mut lens);
                    reduce_depth(&mut lens);
                }
            },
        }
    }
    println!("}}");
}
